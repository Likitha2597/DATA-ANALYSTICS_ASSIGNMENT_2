use sakila;

-- Basic Aggregate Functions:
-- 1. Retrieve the total number of rentals made in the Sakila database.Hint: Use the COUNT() function.
Use sakila;
select count(rental_id) as total_no_of_rentals
 from rental;

-- 2. Find the average rental duration (in days) of movies rented from the Sakila database.Hint: Utilize the AVG() function.
SELECT AVG(datediff(return_date,rental_date)) as average_duration_in_days
from rental;

-- String Functions:
-- 3. Display the first name and last name of customers in uppercase.Hint: Use the UPPER () function.

SELECT UPPER(first_name) as
upper_first_name, UPPER(last_name) as upper_last_name
FROM actor;

-- 4. Extract the month from the rental date and display it alongside the rental ID.Hint: Employ the MONTH() function.

SELECT rental_id, Month(rental_date) as rental_month
from rental;

-- GROUP BY:
-- 5. Retrieve the count of rentals for each customer (display customer ID and the count of rentals).Hint: Use COUNT () in conjunction with GROUP BY.

SELECT c.customer_id, COUNT(r.rental_id) as rental_count
from customer c
left join rental r on c.customer_id=r.customer_id
group by c.customer_id;

-- 6. Find the total revenue generated by each store.Hint: Combine SUM() and GROUP BY.

SELECT s.store_id, sum(p.amount) as total_revenue
from store s
join staff st on s.store_id=st.store_id
join payment P on st.staff_id=p.staff_id
group by s.store_id;

-- Joins:
-- 7. Display the title of the movie, customer s first name, and last name who rented it.Hint: Use JOIN between the film, inventory, rental, and customer tables.

SELECT f.title as movie_title, c.first_name, c.last_name
from film f
join inventory i on f.film_id=i.film_id
join rental r on i.inventory_id=r.inventory_id
join customer c on r.customer_id=c.customer_id;

-- 8. Retrieve the names of all actors who have appeared in the film "Gone with the Wind." Hint: Use JOIN between the film actor, film, and actor tables.

SELECT a.first_name, a.last_name
from actor a
join film_actor fa on a.actor_id=fa.actor_id
join film f on fa.film_id=f.film_id
where f.title='gone with the wind';

-- here there is no movie named with the "Gone with the Wind"
-- to verify it
select title
from film
where title="Gone with the Wind";

-- GROUP BY:
-- 1. Determine the total number of rentals for each category of movies.Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.

select fc.category_id, count(r.rental_id) as rental_count
from rental r
join inventory i on r.inventory_id=i.inventory_id
join film f on i.film_id=f.film_id
join film_category fc on f.film_id=fc.film_id
group by fc.category_id;

-- 2. Find the average rental rate of movies in each language.Hint: JOIN film and language tables, then use AVG () and GROUP BY.

select l.name as language, avg(f.rental_rate) as avg_rental_rate
from film f
join language l on f.language_id=l.language_id
group by l.name;




-- Joins:
-- 3. Retrieve the customer names along with the total amount they've spent on rentals.Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.

select c.first_name, c.last_name,
sum(p.amount) as total_amount_spent from customer c
join payment p on c.customer_id=p.customer_id
join rental r on c.customer_id=r.customer_id
group by c.customer_id;




-- 4. List the titles of movies rented by each customer in a particular city (e.g., 'London').Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.

select c.first_name, c.last_name, f.title as rented_movie_title
from customer c
join address a on c.address_id=a.address_id
join city ci on a.city_id= ci.city_id
join rental r on c.customer_id= r.customer_id
join inventory i on r.inventory_id=i.inventory_id
join film f on i.film_id= f.film_id
where ci.city='london'
order by c.first_name, c.last_name, f.title;

-- Advanced Joins and GROUP BY:
-- 5. Display the top 5 rented movies along with the number of times they've been rented.Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.

select f.title as movie_title, count(*) as rental_count
from film f
join inventory i on f.film_id=i.film_id
join rental r on i.inventory_id=r.inventory_id
group by f.title
order by rental_count desc limit 5;

-- 6. Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.

select c.customer_id, c.first_name, c.last_name
from customer c 
join rental r on c.customer_id=r.customer_id
join inventory i on r.inventory_id=i.inventory_id
join store s on i.store_id=s.store_id
where s.store_id in (1,2)
group by c.customer_id, c.first_name, c.last_name
having count(distinct s.store_id)= 2;








